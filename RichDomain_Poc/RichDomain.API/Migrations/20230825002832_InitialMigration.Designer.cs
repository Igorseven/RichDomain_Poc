// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RichDomain.API.Business.Insfrastructure.ORM.Context;

#nullable disable

namespace RichDomain.API.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230825002832_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RichDomain.API.Business.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_customer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<byte>("CustomerType")
                        .HasColumnType("tinyint")
                        .HasColumnName("customer_type");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("last_name");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", "RichDomain");
                });

            modelBuilder.Entity("RichDomain.API.Business.Domain.Entities.Email", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_email");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.HasKey("EmailId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Email", "RichDomain");
                });

            modelBuilder.Entity("RichDomain.API.Business.Domain.Entities.Customer", b =>
                {
                    b.OwnsOne("RichDomain.API.Business.Domain.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<string>("CellPhoneNumber")
                                .IsRequired()
                                .HasColumnType("Varchar(14)")
                                .HasColumnName("cell_phone");

                            b1.Property<string>("TelephoneNumber")
                                .HasColumnType("Varchar(12)")
                                .HasColumnName("phone_number");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customer", "RichDomain");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("RichDomain.API.Business.Domain.Entities.Email", b =>
                {
                    b.HasOne("RichDomain.API.Business.Domain.Entities.Customer", null)
                        .WithOne("Email")
                        .HasForeignKey("RichDomain.API.Business.Domain.Entities.Email", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RichDomain.API.Business.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Email");
                });
#pragma warning restore 612, 618
        }
    }
}
